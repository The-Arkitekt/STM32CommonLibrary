#ifndef GPIO_DEF_H
#define GPIO_DEF_H

/**
 * All definitions are coming for HAL for now
 *
 * If HAL is no longer used, this file will have it's own definitions
 */

#include "stm32f429xx.h"
#include "stdint.h"

namespace STM32f429{

namespace GPIO{

// custom types for type safety
typedef GPIO_TypeDef * PORT_TYPE;
typedef uint32_t       CLK_ENABLE_MASK_TYPE;
typedef uint32_t       IDR_MASK_TYPE;
typedef uint32_t       BSRR_MASK_TYPE;
typedef uint32_t       MODE_MASK_TYPE;
typedef uint32_t       O_TYPE_MASK_TYPE;
typedef uint32_t       SPEED_MASK_TYPE;
typedef uint32_t       PULL_MASK_TYPE;

// constants
const uint8_t NUM_PORTS      = 11U;
const uint8_t NUM_PINS       = 16U;
const uint8_t NUM_PIN_STATES = 2U;
const uint8_t NUM_MODES      = 4U;
const uint8_t NUM_OTYPES     = 2U;
const uint8_t NUM_SPEEDS     = 4U;
const uint8_t NUM_PULLS      = 3U;

// Port Address constants

typedef enum{
	PORT_A = 0U,
	PORT_B,
	PORT_C,
	PORT_D,
	PORT_E,
	PORT_F,
	PORT_G,
	PORT_H,
	PORT_I,
	PORT_J,
	PORT_K
}PortSelect;

const PORT_TYPE PORTS[NUM_PORTS] = {
	GPIOA,
	GPIOB,
	GPIOC,
	GPIOD,
	GPIOE,
	GPIOF,
	GPIOG,
	GPIOH,
	GPIOI,
	GPIOJ,
	GPIOK
};

const CLK_ENABLE_MASK_TYPE CLK_ENABLE_MASKS[NUM_PORTS] = {
	RCC_AHB1ENR_GPIOAEN,
	RCC_AHB1ENR_GPIOBEN,
	RCC_AHB1ENR_GPIOCEN,
	RCC_AHB1ENR_GPIODEN,
	RCC_AHB1ENR_GPIOEEN,
	RCC_AHB1ENR_GPIOFEN,
	RCC_AHB1ENR_GPIOGEN,
	RCC_AHB1ENR_GPIOHEN,
	RCC_AHB1ENR_GPIOIEN,
	RCC_AHB1ENR_GPIOJEN,
	RCC_AHB1ENR_GPIOKEN
};

typedef enum{
	PIN_0 = 0U,
	PIN_1,
	PIN_2,
	PIN_3,
	PIN_4,
	PIN_5,
	PIN_6,
	PIN_7,
	PIN_8,
	PIN_9,
	PIN_10,
	PIN_11,
	PIN_12,
	PIN_13,
	PIN_14,
	PIN_15,
	PIN_ALL
}PinSelect;

// Pin State values
typedef enum
{
	RESET = 0U,
	SET
}PinState;

const IDR_MASK_TYPE IDR_MASKS[NUM_PINS+1] = {  /* The 2 bits corresponding to each pin */
		GPIO_IDR_ID0,
		GPIO_IDR_ID1,
		GPIO_IDR_ID2,
		GPIO_IDR_ID3,
		GPIO_IDR_ID4,
		GPIO_IDR_ID5,
		GPIO_IDR_ID6,
		GPIO_IDR_ID7,
		GPIO_IDR_ID8,
		GPIO_IDR_ID9,
		GPIO_IDR_ID10,
		GPIO_IDR_ID11,
		GPIO_IDR_ID12,
		GPIO_IDR_ID13,
		GPIO_IDR_ID14,
		GPIO_IDR_ID15,
		0x0000FFFF
};

const BSRR_MASK_TYPE BS_MASKS[NUM_PINS+1] = {  /* The 2 bits corresponding to each pin */
		GPIO_BSRR_BS0,
		GPIO_BSRR_BS1,
		GPIO_BSRR_BS2,
		GPIO_BSRR_BS3,
		GPIO_BSRR_BS4,
		GPIO_BSRR_BS5,
		GPIO_BSRR_BS6,
		GPIO_BSRR_BS7,
		GPIO_BSRR_BS8,
		GPIO_BSRR_BS9,
		GPIO_BSRR_BS10,
		GPIO_BSRR_BS11,
		GPIO_BSRR_BS12,
		GPIO_BSRR_BS13,
		GPIO_BSRR_BS14,
		GPIO_BSRR_BS15,
		0x0000FFFF
};

const BSRR_MASK_TYPE BR_MASKS[NUM_PINS+1] = {  /* The 2 bits corresponding to each pin */
		GPIO_BSRR_BR0,
		GPIO_BSRR_BR1,
		GPIO_BSRR_BR2,
		GPIO_BSRR_BR3,
		GPIO_BSRR_BR4,
		GPIO_BSRR_BR5,
		GPIO_BSRR_BR6,
		GPIO_BSRR_BR7,
		GPIO_BSRR_BR8,
		GPIO_BSRR_BR9,
		GPIO_BSRR_BR10,
		GPIO_BSRR_BR11,
		GPIO_BSRR_BR12,
		GPIO_BSRR_BR13,
		GPIO_BSRR_BR14,
		GPIO_BSRR_BR15,
		0xFFFF0000
};

typedef enum{
	INPUT = 0U,  /* !< Input Floating Mode     */
	OUTPUT,      /* !< Output General Purpose  */
	ALTERNATE,   /* !< Alternate Function Mode */
	ANALOG       /* !< Analog Mode             */
}ModeSelect;

const MODE_MASK_TYPE MODE_MASKS[NUM_PINS+1] = {  /* The 2 bits corresponding to each pin */
		GPIO_MODER_MODER0,
		GPIO_MODER_MODER1,
		GPIO_MODER_MODER2,
		GPIO_MODER_MODER3,
		GPIO_MODER_MODER4,
		GPIO_MODER_MODER5,
		GPIO_MODER_MODER6,
		GPIO_MODER_MODER7,
		GPIO_MODER_MODER8,
		GPIO_MODER_MODER9,
		GPIO_MODER_MODER10,
		GPIO_MODER_MODER11,
		GPIO_MODER_MODER12,
		GPIO_MODER_MODER13,
		GPIO_MODER_MODER14,
		GPIO_MODER_MODER15,
		0xFFFFFFFF
};

const MODE_MASK_TYPE MODE_SELECT_MASKS[NUM_PINS+1][NUM_MODES] = {
  {0U, GPIO_MODER_MODER0_0, GPIO_MODER_MODER0_1, GPIO_MODER_MODER0},
  {0U, GPIO_MODER_MODER1_0, GPIO_MODER_MODER1_1, GPIO_MODER_MODER1},
  {0U, GPIO_MODER_MODER2_0, GPIO_MODER_MODER2_1, GPIO_MODER_MODER2},
  {0U, GPIO_MODER_MODER3_0, GPIO_MODER_MODER3_1, GPIO_MODER_MODER3},
  {0U, GPIO_MODER_MODER4_0, GPIO_MODER_MODER4_1, GPIO_MODER_MODER4},
  {0U, GPIO_MODER_MODER5_0, GPIO_MODER_MODER5_1, GPIO_MODER_MODER5},
  {0U, GPIO_MODER_MODER6_0, GPIO_MODER_MODER6_1, GPIO_MODER_MODER6},
  {0U, GPIO_MODER_MODER7_0, GPIO_MODER_MODER7_1, GPIO_MODER_MODER7},
  {0U, GPIO_MODER_MODER8_0, GPIO_MODER_MODER8_1, GPIO_MODER_MODER8},
  {0U, GPIO_MODER_MODER9_0, GPIO_MODER_MODER9_1, GPIO_MODER_MODER9},
  {0U, GPIO_MODER_MODER10_0, GPIO_MODER_MODER10_1, GPIO_MODER_MODER10},
  {0U, GPIO_MODER_MODER11_0, GPIO_MODER_MODER11_1, GPIO_MODER_MODER11},
  {0U, GPIO_MODER_MODER12_0, GPIO_MODER_MODER12_1, GPIO_MODER_MODER12},
  {0U, GPIO_MODER_MODER13_0, GPIO_MODER_MODER13_1, GPIO_MODER_MODER13},
  {0U, GPIO_MODER_MODER14_0, GPIO_MODER_MODER14_1, GPIO_MODER_MODER14},
  {0U, GPIO_MODER_MODER15_0, GPIO_MODER_MODER15_1, GPIO_MODER_MODER15},
  {0U, 0x55555555, 0xAAAAAAAA, 0xFFFFFFFF}
};

typedef enum{
	PP = 0U,	/* !< Output Push-Pull  */
	OD   		/* !< Output Open-Drain */
}OTypeSelect;

const O_TYPE_MASK_TYPE O_TYPE_MASKS[NUM_PINS+1] = {  /* The 2 bits corresponding to each pin */
		GPIO_OTYPER_OT0,
		GPIO_OTYPER_OT1,
		GPIO_OTYPER_OT2,
		GPIO_OTYPER_OT3,
		GPIO_OTYPER_OT4,
		GPIO_OTYPER_OT5,
		GPIO_OTYPER_OT6,
		GPIO_OTYPER_OT7,
		GPIO_OTYPER_OT8,
		GPIO_OTYPER_OT9,
		GPIO_OTYPER_OT10,
		GPIO_OTYPER_OT11,
		GPIO_OTYPER_OT12,
		GPIO_OTYPER_OT13,
		GPIO_OTYPER_OT14,
		GPIO_OTYPER_OT15,
		0x0000FFFF
};

const O_TYPE_MASK_TYPE O_TYPE_SELECT_MASKS[NUM_PINS+1][NUM_OTYPES] = {
  {0U, GPIO_OTYPER_OT0},
  {0U, GPIO_OTYPER_OT1},
  {0U, GPIO_OTYPER_OT2},
  {0U, GPIO_OTYPER_OT3},
  {0U, GPIO_OTYPER_OT4},
  {0U, GPIO_OTYPER_OT5},
  {0U, GPIO_OTYPER_OT6},
  {0U, GPIO_OTYPER_OT7},
  {0U, GPIO_OTYPER_OT8},
  {0U, GPIO_OTYPER_OT9},
  {0U, GPIO_OTYPER_OT10},
  {0U, GPIO_OTYPER_OT11},
  {0U, GPIO_OTYPER_OT12},
  {0U, GPIO_OTYPER_OT13},
  {0U, GPIO_OTYPER_OT14},
  {0U, GPIO_OTYPER_OT15},
  {0U, 0x0000FFFF}
};

typedef enum{
	FREQ_LOW = 0U,
	FREG_MED,
	FREQ_HIGH,
	FREQ_VERY_HIGH,
}SpeedSelect;

const SPEED_MASK_TYPE SPEED_MASKS[NUM_PINS+1] = {  /* The 2 bits corresponding to each pin */
		GPIO_OSPEEDR_OSPEED0,
		GPIO_OSPEEDR_OSPEED1,
		GPIO_OSPEEDR_OSPEED2,
		GPIO_OSPEEDR_OSPEED3,
		GPIO_OSPEEDR_OSPEED4,
		GPIO_OSPEEDR_OSPEED5,
		GPIO_OSPEEDR_OSPEED6,
		GPIO_OSPEEDR_OSPEED7,
		GPIO_OSPEEDR_OSPEED8,
		GPIO_OSPEEDR_OSPEED9,
		GPIO_OSPEEDR_OSPEED10,
		GPIO_OSPEEDR_OSPEED11,
		GPIO_OSPEEDR_OSPEED12,
		GPIO_OSPEEDR_OSPEED13,
		GPIO_OSPEEDR_OSPEED14,
		GPIO_OSPEEDR_OSPEED15,
		0xFFFFFFFF
};

const SPEED_MASK_TYPE SPEED_SELECT_MASKS[NUM_PINS+1][NUM_SPEEDS] = {
  {0U, GPIO_OSPEEDR_OSPEED0_0, GPIO_OSPEEDR_OSPEED0_1, GPIO_OSPEEDR_OSPEED0},
  {0U, GPIO_OSPEEDR_OSPEED1_0, GPIO_OSPEEDR_OSPEED1_1, GPIO_OSPEEDR_OSPEED1},
  {0U, GPIO_OSPEEDR_OSPEED2_0, GPIO_OSPEEDR_OSPEED2_1, GPIO_OSPEEDR_OSPEED2},
  {0U, GPIO_OSPEEDR_OSPEED3_0, GPIO_OSPEEDR_OSPEED3_1, GPIO_OSPEEDR_OSPEED3},
  {0U, GPIO_OSPEEDR_OSPEED4_0, GPIO_OSPEEDR_OSPEED4_1, GPIO_OSPEEDR_OSPEED4},
  {0U, GPIO_OSPEEDR_OSPEED5_0, GPIO_OSPEEDR_OSPEED5_1, GPIO_OSPEEDR_OSPEED5},
  {0U, GPIO_OSPEEDR_OSPEED6_0, GPIO_OSPEEDR_OSPEED6_1, GPIO_OSPEEDR_OSPEED6},
  {0U, GPIO_OSPEEDR_OSPEED7_0, GPIO_OSPEEDR_OSPEED7_1, GPIO_OSPEEDR_OSPEED7},
  {0U, GPIO_OSPEEDR_OSPEED8_0, GPIO_OSPEEDR_OSPEED8_1, GPIO_OSPEEDR_OSPEED8},
  {0U, GPIO_OSPEEDR_OSPEED9_0, GPIO_OSPEEDR_OSPEED9_1, GPIO_OSPEEDR_OSPEED9},
  {0U, GPIO_OSPEEDR_OSPEED10_0, GPIO_OSPEEDR_OSPEED10_1, GPIO_OSPEEDR_OSPEED10},
  {0U, GPIO_OSPEEDR_OSPEED11_0, GPIO_OSPEEDR_OSPEED11_1, GPIO_OSPEEDR_OSPEED11},
  {0U, GPIO_OSPEEDR_OSPEED12_0, GPIO_OSPEEDR_OSPEED12_1, GPIO_OSPEEDR_OSPEED12},
  {0U, GPIO_OSPEEDR_OSPEED13_0, GPIO_OSPEEDR_OSPEED13_1, GPIO_OSPEEDR_OSPEED13},
  {0U, GPIO_OSPEEDR_OSPEED14_0, GPIO_OSPEEDR_OSPEED14_1, GPIO_OSPEEDR_OSPEED14},
  {0U, GPIO_OSPEEDR_OSPEED15_0, GPIO_OSPEEDR_OSPEED15_1, GPIO_OSPEEDR_OSPEED15},
  {0U, 0x55555555, 0xAAAAAAAA, 0xFFFFFFFF}
};

typedef enum{
	NO_PULL = 0U,
	PULL_UP,
	PULL_DOWN,
}PullSelect;

const PULL_MASK_TYPE PULL_MASKS[NUM_PINS+1] = {  /* The 2 bits corresponding to each pin */
		GPIO_PUPDR_PUPD0,
		GPIO_PUPDR_PUPD1,
		GPIO_PUPDR_PUPD2,
		GPIO_PUPDR_PUPD3,
		GPIO_PUPDR_PUPD4,
		GPIO_PUPDR_PUPD5,
		GPIO_PUPDR_PUPD6,
		GPIO_PUPDR_PUPD7,
		GPIO_PUPDR_PUPD8,
		GPIO_PUPDR_PUPD9,
		GPIO_PUPDR_PUPD10,
		GPIO_PUPDR_PUPD11,
		GPIO_PUPDR_PUPD12,
		GPIO_PUPDR_PUPD13,
		GPIO_PUPDR_PUPD14,
		GPIO_PUPDR_PUPD15,
		0xFFFFFFFF
};

const PULL_MASK_TYPE PULL_SELECT_MASKS[NUM_PINS+1][NUM_PULLS] = {
  {0U, GPIO_PUPDR_PUPD0_0, GPIO_PUPDR_PUPD0_1},
  {0U, GPIO_PUPDR_PUPD1_0, GPIO_PUPDR_PUPD1_1},
  {0U, GPIO_PUPDR_PUPD2_0, GPIO_PUPDR_PUPD2_1},
  {0U, GPIO_PUPDR_PUPD3_0, GPIO_PUPDR_PUPD3_1},
  {0U, GPIO_PUPDR_PUPD4_0, GPIO_PUPDR_PUPD4_1},
  {0U, GPIO_PUPDR_PUPD5_0, GPIO_PUPDR_PUPD5_1},
  {0U, GPIO_PUPDR_PUPD6_0, GPIO_PUPDR_PUPD6_1},
  {0U, GPIO_PUPDR_PUPD7_0, GPIO_PUPDR_PUPD7_1},
  {0U, GPIO_PUPDR_PUPD8_0, GPIO_PUPDR_PUPD8_1},
  {0U, GPIO_PUPDR_PUPD9_0, GPIO_PUPDR_PUPD9_1},
  {0U, GPIO_PUPDR_PUPD10_0, GPIO_PUPDR_PUPD10_1},
  {0U, GPIO_PUPDR_PUPD11_0, GPIO_PUPDR_PUPD11_1},
  {0U, GPIO_PUPDR_PUPD12_0, GPIO_PUPDR_PUPD12_1},
  {0U, GPIO_PUPDR_PUPD13_0, GPIO_PUPDR_PUPD13_1},
  {0U, GPIO_PUPDR_PUPD14_0, GPIO_PUPDR_PUPD14_1},
  {0U, GPIO_PUPDR_PUPD15_0, GPIO_PUPDR_PUPD15_1},
  {0U, 0x55555555, 0xAAAAAAAA}
};

}

}

#endif //GPIO_DEF_H
